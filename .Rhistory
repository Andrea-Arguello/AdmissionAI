mosaicplot(course_achievements_by_gender, col=hcl(c(250,200,150,100,50,10)), main="Frecuencia de logros en materias de STEM por género de 2017 a 2019", las=1, ylab="Materia")
mosaicplot(course_achievements_by_gender, sort=1:7, col=hcl(c(10,210)), main="Freuencia de logros por género, dividido en materias de STEM 2017 a 2019", las=1, ylab="Materia")
mosaicplot(course_achievements_by_gender, sort=1:6, col=hcl(c(10,210)), main="Freuencia de logros por género, dividido en materias de STEM 2017 a 2019", las=1, ylab="Materia")
mosaicplot(course_achievements_by_gender, sort=1:3, col=hcl(c(10,210)), main="Freuencia de logros por género, dividido en materias de STEM 2017 a 2019", las=1, ylab="Materia")
mosaicplot(course_achievements_by_gender, sort=1:7, col=hcl(c(10,210)), main="Freuencia de logros por género, dividido en materias de STEM 2017 a 2019", las=1, ylab="Materia")
mosaicplot(course_achievements_by_gender, sort=1:2, col=hcl(c(10,210)), main="Freuencia de logros por género, dividido en materias de STEM 2017 a 2019", las=1, ylab="Materia")
mosaicplot(course_achievements_by_gender, sort=2:2, col=hcl(c(10,210)), main="Freuencia de logros por género, dividido en materias de STEM 2017 a 2019", las=1, ylab="Materia")
mosaicplot(course_achievements_by_gender, sort=2:1, col=hcl(c(10,210)), main="Freuencia de logros por género, dividido en materias de STEM 2017 a 2019", las=1, ylab="Materia")
course_achievements_by_gender
mosaicplot(course_achievements_by_gender, sort=2:1, col=hcl(c(10,210)), main="Logros obtenidos en materias de STEM de 2017 a 2019", las=1, ylab="Materia")
# Shows what course receives more achievements by gender
# mosaicplot(course_achievements_by_gender, col=hcl(c(250,200,150,100,50,10)), main="Frecuencia de logros por materia de STEM, dividido por género de 2017 a 2019", las=1, ylab="Materia")
mosaicplot(gender~subject_name, data=stem_achievements_wgender, sort=2:1, col=hcl(c(10,210)), main="Logros obtenidos en materias de STEM de 2017 a 2019", las=1, ylab="Materia")
# Shows what course receives more achievements by gender
# mosaicplot(course_achievements_by_gender, col=hcl(c(250,200,150,100,50,10)), main="Frecuencia de logros por materia de STEM, dividido por género de 2017 a 2019", las=1, ylab="Materia")
mosaicplot(gender~subject_name, data=stem_achievements_wgender, sort=2:1, col=hcl(c(10,210)), main="Logros obtenidos en materias de STEM de 2017 a 2019", las=1, ylab="Materia", xlab="")
stem_achievements_wgender$gender <- gender.labs
# Shows what course receives more achievements by gender
# mosaicplot(course_achievements_by_gender, col=hcl(c(250,200,150,100,50,10)), main="Frecuencia de logros por materia de STEM, dividido por género de 2017 a 2019", las=1, ylab="Materia")
mosaicplot(gender~subject_name, data=stem_achievements_wgender, sort=2:1, col=hcl(c(10,210)), main="Logros obtenidos en materias de STEM de 2017 a 2019", las=1, ylab="Materia", xlab="")
stem_achievements_wgender <- sqldf("select stem_achievements.*, agenda_subject_filtered.subject_name, students_users_filtered.gender from stem_achievements
inner join students_users_filtered on students_users_filtered.student_id=stem_achievements.student_profile_id
inner join agenda_subject_filtered on agenda_subject_filtered.id=stem_achievements.subject_id")
## Graphs and plots
# Comparison between genders for frequency of achievements
gender.labs <- c("Femenino". "Masculino")
## Graphs and plots
# Comparison between genders for frequency of achievements
gender.labs <- c("Femenino", "Masculino")
names(gender.labs) <- c("female","male")
names(stem_achievements_wgender$gender)
stem_achievements_wgender$gender
print("Hello")
print(Hello)
print(gender.labs)
print(names(gender.labs))
stem_achievements_wgender$gender <- if(stem_achievements_wgender$gender=="female") {stem_achievements_wgender$gender="Femenino"} else {stem_achievements_wgender$gender="Masculino"}
stem_achievements_wgender$gender <- ifelse(stem_achievements_wgender$gender=="female","Femenino","Masculino")
# Shows what course receives more achievements by gender
# mosaicplot(course_achievements_by_gender, col=hcl(c(250,200,150,100,50,10)), main="Frecuencia de logros por materia de STEM, dividido por género de 2017 a 2019", las=1, ylab="Materia")
mosaicplot(gender~subject_name, data=stem_achievements_wgender, sort=2:1, col=hcl(c(10,210)), main="Logros obtenidos en materias de STEM de 2017 a 2019", las=1, ylab="Materia", xlab="")
stem_achievements_wgender <- sqldf("select stem_achievements.*, agenda_subject_filtered.subject_name, students_users_filtered.gender from stem_achievements
inner join students_users_filtered on students_users_filtered.student_id=stem_achievements.student_profile_id
inner join agenda_subject_filtered on agenda_subject_filtered.id=stem_achievements.subject_id")
stem_achievements_wgender$genero <- ifelse(stem_achievements_wgender$gender=="female","Femenino","Masculino")
# Shows what course receives more achievements by gender
# mosaicplot(course_achievements_by_gender, col=hcl(c(250,200,150,100,50,10)), main="Frecuencia de logros por materia de STEM, dividido por género de 2017 a 2019", las=1, ylab="Materia")
mosaicplot(genero~subject_name, data=stem_achievements_wgender, sort=2:1, col=hcl(c(10,210)), main="Logros obtenidos en materias de STEM de 2017 a 2019", las=1, ylab="Materia", xlab="")
# Shows what course receives more achievements by gender
# mosaicplot(course_achievements_by_gender, col=hcl(c(250,200,150,100,50,10)), main="Frecuencia de logros por materia de STEM, dividido por género de 2017 a 2019", las=1, ylab="Materia")
mosaicplot(genero~subject_name, data=stem_achievements_wgender, sort=2:1, col=hcl(c(10,210)), main="Logros obtenidos en materias de STEM de 2017 a 2019", las=1, ylab="Materia", xlab="Género")
View(stem_achievements_wgender)
View(stem_achievements_wgender)
mosaicplot(data=stem_achievements_wgender, achievement_category~subject_name)
mosaicplot(data=stem_achievements_wgender, achievement_category~subject_name, las=2)
mosaicplot(data=stem_achievements_wgender, achievement_category~subject_name, las=3)
mosaicplot(data=stem_achievements_wgender, achievement_category~subject_name, las=4)
mosaicplot(data=stem_achievements_wgender, achievement_category~subject_name, las=2)
mosaicplot(data=stem_achievements_wgender, achievement_category~subject_name, las=2, jus="right")
ggplot(stem_achievements_wgender, aes(x=subject_name, fill=achievement_category)) + geom_histogram()
ggplot(stem_achievements_wgender, aes(x=subject_name, fill=achievement_category)) + geom_histogram(stat="count")
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="count")
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero)
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="identity") + facet_wrap(~genero)
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero)
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + flip_coords()
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + flip_coors()
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + flip_coord()
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + coord_flip()
library(wesanderson)
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + coord_flip() + scale_fill_manual(values=wes_palette(n=3, name="GrandBudapest"))
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + coord_flip() + scale_fill_manual(values=wes_palette(n=3, name="GrandBudapest1"))
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + coord_flip() + scale_fill_manual(values=wes_palette(n=7, name="GrandBudapest1"))
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + coord_flip() + scale_fill_manual(values=wes_palette(n=7, name="Zissou"))
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + coord_flip() + scale_fill_manual(values=wes_palette(n=7, name="Zissou1"))
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + coord_flip() + scale_fill_manual(values=wes_palette(n=7, name="BottleRocket1"))
ggplot(stem_achievements_wgender, aes(x=achievement_category, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + coord_flip()
ggplot(stem_achievements_wgender, aes(x=achievement, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + coord_flip()
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + coord_flip()
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + coord_flip() + ylab("")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + coord_flip() + ylab("") + xlab("Logro")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~genero) + coord_flip() + ylab("") + xlab("Logro") + legend("")
ggplot(aes(x=name, y=perc_freq, group = gender, fill=name), data=students_join_achievements_by_gender_2) +
geom_bar(stat="identity") +
geom_text(aes( label = scales::percent(perc_freq),
y= n/total ), stat= "identity", hjust=1.1, size=3) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), legend.position="none") +
labs(title ="Frecuencia relativa de logros histórico por género",
subtitle="El Valle",
caption="Datos de 2017 a 2019") +
scale_y_continuous(labels=scales::percent) +
facet_grid(~gender, labeller=labeller(gender=gender.labs)) +
xlab("Logro") +
ylab("Frecuencia relativa") +
coord_flip()
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~subject_name) + coord_flip() + ylab("") + xlab("Logro")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(subject_name~) + coord_flip() + ylab("") + xlab("Logro")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(subject_name~) + coord_flip() + ylab("") + xlab("Logro")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") + facet_wrap(~subject_name) + coord_flip() + ylab("") + xlab("Logro")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") + facet_grid(~subject_name) + ylab("") + xlab("Logro")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") + facet_grid(subject_name~) + ylab("") + xlab("Logro")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") + facet_grid(~subject_name) + ylab("") + xlab("Logro")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") + facet_grid(~subject_name) + ylab("") + xlab("Logro") + coord_flip()
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") +
facet_grid(~subject_name) + ylab("") + xlab("Logro") + coord_flip() +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), legend.position="none") +
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") +
facet_grid(~subject_name) + ylab("") + xlab("Logro") + coord_flip() +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), legend.position="none")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") +
facet_grid(~subject_name) + ylab("") + xlab("Logro") + coord_flip() +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), legend.position="none")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") +
facet_grid(~subject_name) + ylab("") + xlab("Logro") + coord_flip() +
theme(legend.position="none")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=genero)) + geom_histogram(stat="count") +
facet_grid(~subject_name) + ylab("") + xlab("Logro") + coord_flip()
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=genero)) + geom_histogram(stat="count") +
facet_grid(~subject_name) + ylab("") + xlab("Logro") + coord_flip() +
theme(legend.title = "Género")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=genero)) + geom_histogram(stat="count") +
facet_grid(~subject_name) + ylab("") + xlab("Logro") + coord_flip() +
labs(fill="Género")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=genero)) + geom_histogram(stat="count") +
facet_wrap(~subject_name) + ylab("") + xlab("Logro") + coord_flip() +
labs(fill="Género")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=genero)) + geom_histogram(stat="count") +
facet_grid(~subject_name) + ylab("") + xlab("Logro") + coord_flip() +
labs(fill="Género")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=genero)) + geom_histogram(stat="count") + ylab("") + xlab("Logro") + coord_flip() +
labs(fill="Género")
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") + ylab("") + xlab("Logro") + coord_flip() +
labs(fill="Materia")
# Achievement frequency by gender in STEM courses
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=genero)) + geom_histogram(stat="count") + ylab("") + xlab("Logro") + coord_flip() +
labs(fill="Género") + title("Frecuencia de logros en cursos de STEM de 2017 a 2019")
# Achievement frequency by gender in STEM courses
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=genero)) + geom_histogram(stat="count") + ylab("") + xlab("Logro") + coord_flip() +
labs(fill="Género", title="Frecuencia de logros en cursos de STEM de 2017 a 2019")
# Achievement frequency by course
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=subject_name)) + geom_histogram(stat="count") + ylab("") + xlab("Logro") + coord_flip() +
labs(fill="Materia", title="Frecuencia de logros en cursos de STEM por curso de 2017 a 2019")
# STEM Course and gender by achievement frequency
mosaicplot(genero~subject_name, data=stem_achievements_wgender, sort=2:1, col=hcl(c(10,210)), main="Logros obtenidos en materias de STEM de 2017 a 2019", las=1, ylab="Materia", xlab="Género")
stem_achievements_wgender %>% group_by(gender, subject_name) %>% summarise(n=n())
stem_achievements_wgender %>% group_by(subject_name) %>% summarise(n=n())
stem_achievements_wgender %>% group_by(subject_name) %>% summarise(n=n()) %>% order_by(n)
stem_achievements_wgender %>% group_by(subject_name) %>% summarise(n=n()) %>% order_by(n())
stem_achievements_wgender %>% group_by(subject_name) %>% summarise(n=n()) %>% order_by(n)
stem_achievements_wgender %>% group_by(subject_name) %>% summarise(n=n()) %>% order_by(subject_name)
stem_achievements_wgender %>% group_by(subject_name) %>% summarise(n=n()) %>% arrange(n)
stem_achievements_wgender %>% group_by(subject_name) %>% summarise(n=n()) %>% arrange(-n)
stem_achievements_wgender %>% group_by(subject_name) %>% summarise(n=n()) %>% arrange(-n) %>% mutate
mosaic(course_achievements_by_gender, main="Logros en materias de STEM por género de 2017 a 2019", legend=T)
mosaic(gender~subject_id, data=stem_achievements_wgender, main="Logros en materias de STEM por género de 2017 a 2019")
mosaic(subject_id~gender, data=stem_achievements_wgender, main="Logros en materias de STEM por género de 2017 a 2019")
library(vcd)
mosaic(subject_id~gender, data=stem_achievements_wgender, main="Logros en materias de STEM por género de 2017 a 2019")
mosaic(subject_name~gender, data=stem_achievements_wgender, set_labels=list(gender=gender.labs), main="Logros en materias de STEM por género de 2017 a 2019",labeling=labeling_border())
mosaic(data=stem_achievements_wgender, subject_name~gender, set_labels=list(gender=gender.labs), main="Logros en materias de STEM por género de 2017 a 2019",labeling=labeling_border())
View(stem_achievements_wgender)
View(stem_achievements_wgender)
View(agenda_subject_filtered)
View(agenda_subject_filtered)
View(agenda_subject_filtered)
library(RPostgreSQL)
library(ggplot2)
library(dplyr)
library(sqldf)
library(forcats)
thatable <- sqldf("select u_cu.id as user_id, u_cu.gender, u_cu.first_name, u_cu.last_name, up_sp.level_id as student_current_level_id, s_l_s1.student_level, s_l_s1.student_stage, s_sr.student_profile_id, a_sa.gradecell_ptr_id as activity_gradecell_id, g_g_activity.name as activity_name, s_sr.score, g_g_activity.percentage as activity_percentage, c_c.cycle_id, c_cy.name as cycle_name, c_s.course_id, c_c.level_id as course_level, s_l_s2.course_level, s_l_s2.course_stage, c_c.subject_id, a_s.name as agenda_subject
from activities_scorableactivity as a_sa
inner join cycle_section as c_s on a_sa.activity_section_id=c_s.id
inner join grades_gradecell as g_g_section on c_s.template_gradecell_id=g_g_section.id
inner join grades_gradecell as g_g_activity on a_sa.gradecell_ptr_id=g_g_activity.id
inner join cycle_course as c_c on c_c.id=c_s.course_id
inner join cycle_cycle as c_cy on c_c.cycle_id=c_cy.id
inner join agenda_subject as a_s on c_c.subject_id=a_s.id
inner join scores_scoreregister as s_sr on s_sr.scorable_activity_id=a_sa.gradecell_ptr_id
inner join userprofiles_studentprofile as up_sp on up_sp.id=s_sr.student_profile_id
inner join users_customuser as u_cu on u_cu.id=up_sp.user_id
inner join (select s_l.id as level_id, s_l.name as student_level, stage_id, s_s.name as student_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s1 on s_l_s1.level_id=up_sp.level_id
inner join (select s_l.id as level_id, s_l.name as course_level, stage_id, s_s.name as course_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s2 on s_l_s2.level_id=c_c.level_id;",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
View(thatable)
View(thatable)
thatable %>% filter(subject_id==2|subject_id==11|subject_id==19) %>% select(score) %>% summarise(average=mean(score))
thatable <- sqldf("select u_cu.id as user_id, u_cu.gender, u_cu.first_name, u_cu.last_name, up_sp.level_id as student_current_level_id, s_l_s1.student_level, s_l_s1.student_stage, s_sr.student_profile_id, a_sa.gradecell_ptr_id as activity_gradecell_id, g_g_activity.name as activity_name, s_sr.score, g_g_activity.percentage as activity_percentage, c_c.cycle_id, c_cy.name as cycle_name, c_s.course_id, c_c.level_id as course_level_id, s_l_s2.course_level, s_l_s2.course_stage, c_c.subject_id, a_s.name as agenda_subject
from activities_scorableactivity as a_sa
inner join cycle_section as c_s on a_sa.activity_section_id=c_s.id
inner join grades_gradecell as g_g_section on c_s.template_gradecell_id=g_g_section.id
inner join grades_gradecell as g_g_activity on a_sa.gradecell_ptr_id=g_g_activity.id
inner join cycle_course as c_c on c_c.id=c_s.course_id
inner join cycle_cycle as c_cy on c_c.cycle_id=c_cy.id
inner join agenda_subject as a_s on c_c.subject_id=a_s.id
inner join scores_scoreregister as s_sr on s_sr.scorable_activity_id=a_sa.gradecell_ptr_id
inner join userprofiles_studentprofile as up_sp on up_sp.id=s_sr.student_profile_id
inner join users_customuser as u_cu on u_cu.id=up_sp.user_id
inner join (select s_l.id as level_id, s_l.name as student_level, stage_id, s_s.name as student_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s1 on s_l_s1.level_id=up_sp.level_id
inner join (select s_l.id as level_id, s_l.name as course_level, stage_id, s_s.name as course_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s2 on s_l_s2.level_id=c_c.level_id;",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
thatable <- sqldf("select u_cu.id as user_id, u_cu.gender, u_cu.first_name, u_cu.last_name, up_sp.level_id as student_current_level_id, s_l_s1.student_level, s_l_s1.student_stage, s_sr.student_profile_id, a_sa.gradecell_ptr_id as activity_gradecell_id, g_g_activity.name as activity_name, s_sr.score, g_g_activity.percentage as activity_percentage, c_c.cycle_id, c_cy.name as cycle_name, c_s.course_id, c_c.level_id as course_level_id, s_l_s2.course_level, s_l_s2.course_stage, c_c.subject_id, a_s.name as agenda_subject
from activities_scorableactivity as a_sa
inner join cycle_section as c_s on a_sa.activity_section_id=c_s.id
inner join grades_gradecell as g_g_section on c_s.template_gradecell_id=g_g_section.id
inner join grades_gradecell as g_g_activity on a_sa.gradecell_ptr_id=g_g_activity.id
inner join cycle_course as c_c on c_c.id=c_s.course_id
inner join cycle_cycle as c_cy on c_c.cycle_id=c_cy.id
inner join agenda_subject as a_s on c_c.subject_id=a_s.id
inner join scores_scoreregister as s_sr on s_sr.scorable_activity_id=a_sa.gradecell_ptr_id
inner join userprofiles_studentprofile as up_sp on up_sp.id=s_sr.student_profile_id
inner join users_customuser as u_cu on u_cu.id=up_sp.user_id
inner join (select s_l.id as level_id, s_l.name as student_level, stage_id, s_s.name as student_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s1 on s_l_s1.level_id=up_sp.level_id
inner join (select s_l.id as level_id, s_l.name as course_level, stage_id, s_s.name as course_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s2 on s_l_s2.level_id=c_c.level_id;",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
rm(thatable)
thatable <- sqldf("select u_cu.id as user_id, u_cu.gender, u_cu.first_name, u_cu.last_name, up_sp.level_id as student_current_level_id, s_l_s1.student_level, s_l_s1.student_stage, s_sr.student_profile_id, a_sa.gradecell_ptr_id as activity_gradecell_id, g_g_activity.name as activity_name, s_sr.score, g_g_activity.percentage as activity_percentage, c_c.cycle_id, c_cy.name as cycle_name, c_s.course_id, c_c.level_id as course_level_id, s_l_s2.course_level, s_l_s2.course_stage, c_c.subject_id, a_s.name as agenda_subject
from activities_scorableactivity as a_sa
inner join cycle_section as c_s on a_sa.activity_section_id=c_s.id
inner join grades_gradecell as g_g_section on c_s.template_gradecell_id=g_g_section.id
inner join grades_gradecell as g_g_activity on a_sa.gradecell_ptr_id=g_g_activity.id
inner join cycle_course as c_c on c_c.id=c_s.course_id
inner join cycle_cycle as c_cy on c_c.cycle_id=c_cy.id
inner join agenda_subject as a_s on c_c.subject_id=a_s.id
inner join scores_scoreregister as s_sr on s_sr.scorable_activity_id=a_sa.gradecell_ptr_id
inner join userprofiles_studentprofile as up_sp on up_sp.id=s_sr.student_profile_id
inner join users_customuser as u_cu on u_cu.id=up_sp.user_id
inner join (select s_l.id as level_id, s_l.name as student_level, stage_id, s_s.name as student_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s1 on s_l_s1.level_id=up_sp.level_id
inner join (select s_l.id as level_id, s_l.name as course_level, stage_id, s_s.name as course_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s2 on s_l_s2.level_id=c_c.level_id;",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
thatable <- sqldf("select u_cu.id as user_id, u_cu.gender, u_cu.first_name, u_cu.last_name, up_sp.level_id as student_current_level_id, s_l_s1.student_level, s_l_s1.student_stage, s_sr.student_profile_id, a_sa.gradecell_ptr_id as activity_gradecell_id, g_g_activity.name as activity_name, s_sr.score, g_g_activity.percentage as activity_percentage, c_c.cycle_id, c_cy.name as cycle_name, c_s.course_id, c_c.level_id as course_level_id, s_l_s2.course_level, s_l_s2.course_stage, c_c.subject_id, a_s.name as agenda_subject
from activities_scorableactivity as a_sa
inner join cycle_section as c_s on a_sa.activity_section_id=c_s.id
inner join grades_gradecell as g_g_section on c_s.template_gradecell_id=g_g_section.id
inner join grades_gradecell as g_g_activity on a_sa.gradecell_ptr_id=g_g_activity.id
inner join cycle_course as c_c on c_c.id=c_s.course_id
inner join cycle_cycle as c_cy on c_c.cycle_id=c_cy.id
inner join agenda_subject as a_s on c_c.subject_id=a_s.id
inner join scores_scoreregister as s_sr on s_sr.scorable_activity_id=a_sa.gradecell_ptr_id
inner join userprofiles_studentprofile as up_sp on up_sp.id=s_sr.student_profile_id
inner join users_customuser as u_cu on u_cu.id=up_sp.user_id
inner join (select s_l.id as level_id, s_l.name as student_level, stage_id, s_s.name as student_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s1 on s_l_s1.level_id=up_sp.level_id
inner join (select s_l.id as level_id, s_l.name as course_level, stage_id, s_s.name as course_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s2 on s_l_s2.level_id=c_c.level_id;",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
thatable <- sqldf("select u_cu.id as user_id, u_cu.gender, u_cu.first_name, u_cu.last_name, up_sp.level_id as student_current_level_id, s_l_s1.student_level, s_l_s1.student_stage, s_sr.student_profile_id, a_sa.gradecell_ptr_id as activity_gradecell_id, g_g_activity.name as activity_name, s_sr.score, g_g_activity.percentage as activity_percentage, c_c.cycle_id, c_cy.name as cycle_name, c_s.course_id, c_c.level_id, s_l_s2.course_level, s_l_s2.course_stage, c_c.subject_id, a_s.name as agenda_subject
from activities_scorableactivity as a_sa
inner join cycle_section as c_s on a_sa.activity_section_id=c_s.id
inner join grades_gradecell as g_g_section on c_s.template_gradecell_id=g_g_section.id
inner join grades_gradecell as g_g_activity on a_sa.gradecell_ptr_id=g_g_activity.id
inner join cycle_course as c_c on c_c.id=c_s.course_id
inner join cycle_cycle as c_cy on c_c.cycle_id=c_cy.id
inner join agenda_subject as a_s on c_c.subject_id=a_s.id
inner join scores_scoreregister as s_sr on s_sr.scorable_activity_id=a_sa.gradecell_ptr_id
inner join userprofiles_studentprofile as up_sp on up_sp.id=s_sr.student_profile_id
inner join users_customuser as u_cu on u_cu.id=up_sp.user_id
inner join (select s_l.id as level_id, s_l.name as student_level, stage_id, s_s.name as student_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s1 on s_l_s1.level_id=up_sp.level_id
inner join (select s_l.id as level_id, s_l.name as course_level, stage_id, s_s.name as course_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s2 on s_l_s2.level_id=c_c.level_id;",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
View(stem_achievements_wgender)
View(stem_achievements_wgender)
# STEM Course and gender by achievement frequency
mosaicplot(genero~subject_name, data=stem_achievements_wgender, sort=2:1, col=hcl(c(10,210)), main="Logros obtenidos en materias de STEM de 2017 a 2019", las=1, ylab="Materia", xlab="Género")
# Achievement frequency by gender in STEM courses
ggplot(stem_achievements_wgender, aes(x=achievement_name, fill=genero)) + geom_histogram(stat="count") + ylab("") + xlab("Logro") + coord_flip() +
labs(fill="Género", title="Frecuencia de logros en cursos de STEM por género de 2017 a 2019")
library(RPostgreSQL)
library(ggplot2)
library(dplyr)
library(sqldf)
library(forcats)
thatable <- sqldf("select u_cu.id as user_id, u_cu.gender, u_cu.first_name, u_cu.last_name, up_sp.level_id as student_current_level_id, s_l_s1.student_level, s_l_s1.student_stage, s_sr.student_profile_id, a_sa.gradecell_ptr_id as activity_gradecell_id, g_g_activity.name as activity_name, s_sr.score, g_g_activity.percentage as activity_percentage, c_c.cycle_id, c_cy.name as cycle_name, c_s.course_id, c_c.level_id, s_l_s2.course_level, s_l_s2.course_stage, c_c.subject_id, a_s.name as agenda_subject
from activities_scorableactivity as a_sa
inner join cycle_section as c_s on a_sa.activity_section_id=c_s.id
inner join grades_gradecell as g_g_section on c_s.template_gradecell_id=g_g_section.id
inner join grades_gradecell as g_g_activity on a_sa.gradecell_ptr_id=g_g_activity.id
inner join cycle_course as c_c on c_c.id=c_s.course_id
inner join cycle_cycle as c_cy on c_c.cycle_id=c_cy.id
inner join agenda_subject as a_s on c_c.subject_id=a_s.id
inner join scores_scoreregister as s_sr on s_sr.scorable_activity_id=a_sa.gradecell_ptr_id
inner join userprofiles_studentprofile as up_sp on up_sp.id=s_sr.student_profile_id
inner join users_customuser as u_cu on u_cu.id=up_sp.user_id
inner join (select s_l.id as level_id, s_l.name as student_level, stage_id, s_s.name as student_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s1 on s_l_s1.level_id=up_sp.level_id
inner join (select s_l.id as level_id, s_l.name as course_level, stage_id, s_s.name as course_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s2 on s_l_s2.level_id=c_c.level_id;",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
thatable <- sqldf("select u_cu.id as user_id, u_cu.gender, u_cu.first_name, u_cu.last_name, up_sp.level_id as student_current_level_id, s_l_s1.student_level, s_l_s1.student_stage, s_sr.student_profile_id, a_sa.gradecell_ptr_id as activity_gradecell_id, g_g_activity.name as activity_name, s_sr.score, g_g_activity.percentage as activity_percentage, c_c.cycle_id, c_cy.name as cycle_name, c_s.course_id, c_c.level_id, s_l_s2.course_level, s_l_s2.course_stage, c_c.subject_id, a_s.name as agenda_subject
from activities_scorableactivity as a_sa
inner join cycle_section as c_s on a_sa.activity_section_id=c_s.id
inner join grades_gradecell as g_g_section on c_s.template_gradecell_id=g_g_section.id
inner join grades_gradecell as g_g_activity on a_sa.gradecell_ptr_id=g_g_activity.id
inner join cycle_course as c_c on c_c.id=c_s.course_id
inner join cycle_cycle as c_cy on c_c.cycle_id=c_cy.id
inner join agenda_subject as a_s on c_c.subject_id=a_s.id
inner join scores_scoreregister as s_sr on s_sr.scorable_activity_id=a_sa.gradecell_ptr_id
inner join userprofiles_studentprofile as up_sp on up_sp.id=s_sr.student_profile_id
inner join users_customuser as u_cu on u_cu.id=up_sp.user_id
inner join (select s_l.id as level_id, s_l.name as student_level, stage_id, s_s.name as student_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s1 on s_l_s1.level_id=up_sp.level_id
inner join (select s_l.id as level_id, s_l.name as course_level, stage_id, s_s.name as course_stage from structure_level as s_l
inner join structure_stage as s_s on stage_id=s_s.id) as s_l_s2 on s_l_s2.level_id=c_c.level_id;",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
thascoretale <- sqldf("select users_customuser.username, userprofiles_studentprofile.user_id, scores_rawgradecellscoreregister.student_profile_id, users_customuser.gender, users_customuser.first_name, users_customuser.last_name, userprofiles_studentprofile.level_id as student_level_id, sl2.name as student_level_name, sl2.stage_id as student_stage_id, ss2.name as student_stage_name, userprofiles_studentprofile.current_cycle_id, cc2.name as current_cycle_name, scores_rawgradecellscoreregister.id as score_rawgsr_id, scores_rawgradecellscoreregister.gradecell_id, grades_gradecell.name as gradecell_name, scores_rawgradecellscoreregister.net_score, cycle_section.course_id, cycle_course.name as course_name, cycle_course.cycle_id, cycle_cycle.name as cycle_name, cycle_course.level_id as course_level_id, structure_level.name as course_level_name, structure_level.stage_id as course_stage_id, structure_stage.name as course_stage_name, cycle_course.subject_id, agenda_subject.name as subject_name
from scores_rawgradecellscoreregister
inner join grades_gradecell on grades_gradecell.id=scores_rawgradecellscoreregister.gradecell_id
inner join cycle_unit on cycle_unit.gradecell_ptr_id=grades_gradecell.id
inner join cycle_section on cycle_unit.unit_section_id=cycle_section.id
inner join cycle_course on cycle_section.course_id=cycle_course.id
inner join agenda_subject on cycle_course.subject_id=agenda_subject.id
inner join cycle_cycle on cycle_course.cycle_id=cycle_cycle.id
inner join structure_level on structure_level.id=cycle_course.level_id
inner join structure_stage on structure_level.stage_id=structure_stage.id
inner join userprofiles_studentprofile on scores_rawgradecellscoreregister.student_profile_id=userprofiles_studentprofile.id
inner join cycle_cycle as cc2 on cc2.id=userprofiles_studentprofile.current_cycle_id
inner join structure_level as sl2 on sl2.id=userprofiles_studentprofile.level_id
inner join structure_stage as ss2 on ss2.id=sl2.stage_id
inner join users_customuser on userprofiles_studentprofile.user_id=users_customuser.id
order by student_profile_id, cycle_id, gradecell_name;",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
thascoretale <- sqldf("select users_customuser.username, userprofiles_studentprofile.user_id, scores_rawgradecellscoreregister.student_profile_id, users_customuser.gender, users_customuser.first_name, users_customuser.last_name, userprofiles_studentprofile.level_id as student_level_id, sl2.name as student_level_name, sl2.stage_id as student_stage_id, ss2.name as student_stage_name, userprofiles_studentprofile.current_cycle_id, cc2.name as current_cycle_name, scores_rawgradecellscoreregister.id as score_rawgsr_id, scores_rawgradecellscoreregister.gradecell_id, grades_gradecell.name as gradecell_name, scores_rawgradecellscoreregister.net_score, cycle_section.course_id, cycle_course.name as course_name, cycle_course.cycle_id, cycle_cycle.name as cycle_name, cycle_course.level_id as course_level_id, structure_level.name as course_level_name, structure_level.stage_id as course_stage_id, structure_stage.name as course_stage_name, cycle_course.subject_id, agenda_subject.name as subject_name
from scores_rawgradecellscoreregister
inner join grades_gradecell on grades_gradecell.id=scores_rawgradecellscoreregister.gradecell_id
inner join cycle_unit on cycle_unit.gradecell_ptr_id=grades_gradecell.id
inner join cycle_section on cycle_unit.unit_section_id=cycle_section.id
inner join cycle_course on cycle_section.course_id=cycle_course.id
inner join agenda_subject on cycle_course.subject_id=agenda_subject.id
inner join cycle_cycle on cycle_course.cycle_id=cycle_cycle.id
inner join structure_level on structure_level.id=cycle_course.level_id
inner join structure_stage on structure_level.stage_id=structure_stage.id
inner join userprofiles_studentprofile on scores_rawgradecellscoreregister.student_profile_id=userprofiles_studentprofile.id
inner join cycle_cycle as cc2 on cc2.id=userprofiles_studentprofile.current_cycle_id
inner join structure_level as sl2 on sl2.id=userprofiles_studentprofile.level_id
inner join structure_stage as ss2 on ss2.id=sl2.stage_id
inner join users_customuser on userprofiles_studentprofile.user_id=users_customuser.id
order by student_profile_id, cycle_id, gradecell_name;",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
thatable <- sqldf("select u_cu.username, up_sp.user_id, s_sr.student_profile_id, u_cu.gender, u_cu.first_name, u_cu.last_name, up_sp.level_id as student_level_id, student_sl.name as student_level_name, student_sl.stage_id as student_stage_id, student_ss.name as student_stage_name, up_sp.current_cycle_id, student_cycle.name as current_cycle_name, a_sraa.achievement_id, a_a.name as achievement_name, a_a.category_id, a_ac.name as achievement_category, c_c.cycle_id as course_cycle_id, course_cycle.name as course_cycle_name, c_s.course_id, c_c.name as course_name, c_c.level_id as course_level_id, course_sl.name as course_level_name, course_sl.stage_id as course_stage_id, course_ss.name as course_stage_name, c_c.subject_id, agenda.name as subject_name
from activities_scorableactivity as a_sa
inner join cycle_section as c_s on a_sa.activity_section_id=c_s.id
inner join grades_gradecell as g_g on c_s.template_gradecell_id=g_g.id
inner join cycle_course as c_c on c_c.id=c_s.course_id
inner join structure_level as course_sl on course_sl.id=c_c.level_id
inner join structure_stage as course_ss on course_ss.id=course_sl.stage_id
inner join cycle_cycle as course_cycle on course_cycle.id=c_c.cycle_id
inner join scores_scoreregister as s_sr on s_sr.scorable_activity_id=a_sa.gradecell_ptr_id
inner join userprofiles_studentprofile as up_sp on up_sp.id=s_sr.student_profile_id
inner join cycle_cycle as student_cycle on student_cycle.id=up_sp.current_cycle_id
inner join structure_level as student_sl on student_sl.id=up_sp.level_id
inner join structure_stage as student_ss on student_ss.id=student_sl.stage_id
inner join users_customuser as u_cu on u_cu.id=up_sp.user_id
inner join achievements_scoreregisterachievementassignation as a_sraa on a_sraa.scoreregister_id=s_sr.id
inner join achievements_achievement as a_a on a_sraa.achievement_id=a_a.id
inner join achievements_achievementcategory as a_ac on a_ac.id=a_a.category_id
inner join agenda_subject as agenda on agenda.id=c_c.subject_id;",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
View(thatable)
View(thatable)
View(thascoretale)
View(thascoretale)
plot(thascoretable)
thascoretale$username
thascoretale <- sqldf("select users_customuser.username, userprofiles_studentprofile.user_id, scores_rawgradecellscoreregister.student_profile_id, users_customuser.gender, users_customuser.first_name, users_customuser.last_name, userprofiles_studentprofile.level_id as student_level_id, sl2.name as student_level_name, sl2.stage_id as student_stage_id, ss2.name as student_stage_name, userprofiles_studentprofile.current_cycle_id, cc2.name as current_cycle_name, scores_rawgradecellscoreregister.id as score_rawgsr_id, scores_rawgradecellscoreregister.gradecell_id, grades_gradecell.name as gradecell_name, scores_rawgradecellscoreregister.score, cycle_section.course_id, cycle_course.name as course_name, cycle_course.cycle_id, cycle_cycle.name as cycle_name, cycle_course.level_id as course_level_id, structure_level.name as course_level_name, structure_level.stage_id as course_stage_id, structure_stage.name as course_stage_name, cycle_course.subject_id, agenda_subject.name as subject_name
from scores_rawgradecellscoreregister
inner join grades_gradecell on grades_gradecell.id=scores_rawgradecellscoreregister.gradecell_id
inner join cycle_unit on cycle_unit.gradecell_ptr_id=grades_gradecell.id
inner join cycle_section on cycle_unit.unit_section_id=cycle_section.id
inner join cycle_course on cycle_section.course_id=cycle_course.id
inner join agenda_subject on cycle_course.subject_id=agenda_subject.id
inner join cycle_cycle on cycle_course.cycle_id=cycle_cycle.id
inner join structure_level on structure_level.id=cycle_course.level_id
inner join structure_stage on structure_level.stage_id=structure_stage.id
inner join userprofiles_studentprofile on scores_rawgradecellscoreregister.student_profile_id=userprofiles_studentprofile.id
inner join cycle_cycle as cc2 on cc2.id=userprofiles_studentprofile.current_cycle_id
inner join structure_level as sl2 on sl2.id=userprofiles_studentprofile.level_id
inner join structure_stage as ss2 on ss2.id=sl2.stage_id
inner join users_customuser on userprofiles_studentprofile.user_id=users_customuser.id
order by student_profile_id, cycle_id, gradecell_name;",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
library(RPostgreSQL)
library(sqldf)
thascoretale <- sqldf("select users_customuser.username, userprofiles_studentprofile.user_id, scores_rawgradecellscoreregister.student_profile_id, users_customuser.gender, users_customuser.first_name, users_customuser.last_name, userprofiles_studentprofile.level_id as student_level_id, sl2.name as student_level_name, sl2.stage_id as student_stage_id, ss2.name as student_stage_name, userprofiles_studentprofile.current_cycle_id, cc2.name as current_cycle_name, scores_rawgradecellscoreregister.id as score_rawgsr_id, scores_rawgradecellscoreregister.gradecell_id, grades_gradecell.name as gradecell_name, scores_rawgradecellscoreregister.score, cycle_section.course_id, cycle_course.name as course_name, cycle_course.cycle_id, cycle_cycle.name as cycle_name, cycle_course.level_id as course_level_id, structure_level.name as course_level_name, structure_level.stage_id as course_stage_id, structure_stage.name as course_stage_name, cycle_course.subject_id, agenda_subject.name as subject_name
from scores_rawgradecellscoreregister
inner join grades_gradecell on grades_gradecell.id=scores_rawgradecellscoreregister.gradecell_id
inner join cycle_unit on cycle_unit.gradecell_ptr_id=grades_gradecell.id
inner join cycle_section on cycle_unit.unit_section_id=cycle_section.id
inner join cycle_course on cycle_section.course_id=cycle_course.id
inner join agenda_subject on cycle_course.subject_id=agenda_subject.id
inner join cycle_cycle on cycle_course.cycle_id=cycle_cycle.id
inner join structure_level on structure_level.id=cycle_course.level_id
inner join structure_stage on structure_level.stage_id=structure_stage.id
inner join userprofiles_studentprofile on scores_rawgradecellscoreregister.student_profile_id=userprofiles_studentprofile.id
inner join cycle_cycle as cc2 on cc2.id=userprofiles_studentprofile.current_cycle_id
inner join structure_level as sl2 on sl2.id=userprofiles_studentprofile.level_id
inner join structure_stage as ss2 on ss2.id=sl2.stage_id
inner join users_customuser on userprofiles_studentprofile.user_id=users_customuser.id
order by student_profile_id, cycle_id, gradecell_name;",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
thascoretale <- sqldf("select users_customuser.username, userprofiles_studentprofile.user_id, scores_rawgradecellscoreregister.student_profile_id, users_customuser.gender, users_customuser.first_name, users_customuser.last_name, userprofiles_studentprofile.level_id as student_level_id, sl2.name as student_level_name, sl2.stage_id as student_stage_id, ss2.name as student_stage_name, userprofiles_studentprofile.current_cycle_id, cc2.name as current_cycle_name, scores_rawgradecellscoreregister.id as score_rawgsr_id, scores_rawgradecellscoreregister.gradecell_id, grades_gradecell.name as gradecell_name, scores_rawgradecellscoreregister.score, cycle_section.course_id, cycle_course.name as course_name, cycle_course.cycle_id, cycle_cycle.name as cycle_name, cycle_course.level_id as course_level_id, structure_level.name as course_level_name, structure_level.stage_id as course_stage_id, structure_stage.name as course_stage_name, cycle_course.subject_id, agenda_subject.name as subject_name
from scores_rawgradecellscoreregister
inner join grades_gradecell on grades_gradecell.id=scores_rawgradecellscoreregister.gradecell_id
inner join cycle_unit on cycle_unit.gradecell_ptr_id=grades_gradecell.id
inner join cycle_section on cycle_unit.unit_section_id=cycle_section.id
inner join cycle_course on cycle_section.course_id=cycle_course.id
inner join agenda_subject on cycle_course.subject_id=agenda_subject.id
inner join cycle_cycle on cycle_course.cycle_id=cycle_cycle.id
inner join structure_level on structure_level.id=cycle_course.level_id
inner join structure_stage on structure_level.stage_id=structure_stage.id
inner join userprofiles_studentprofile on scores_rawgradecellscoreregister.student_profile_id=userprofiles_studentprofile.id
inner join cycle_cycle as cc2 on cc2.id=userprofiles_studentprofile.current_cycle_id
inner join structure_level as sl2 on sl2.id=userprofiles_studentprofile.level_id
inner join structure_stage as ss2 on ss2.id=sl2.stage_id
inner join users_customuser on userprofiles_studentprofile.user_id=users_customuser.id
order by student_profile_id, cycle_id, gradecell_name;",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
test <- thascoretale %>% group_by(username,student_level_id,course_id) %>% summarise(average = mean(score))
library(dplyr)
test <- thascoretale %>% group_by(username,student_level_id,course_id) %>% summarise(average = mean(score))
View(test)
View(test)
test <- thascoretale %>% group_by(username,course_level_id,course_id) %>% summarise(average = mean(score))
View(test)
View(test)
ggplot(test,aes(x=course_level_id,y=average)) + geom_line()
library(ggplot2)
test <- thascoretale %>% group_by(username,course_level_id,course_id) %>% summarise(average = mean(score))
ggplot(test,aes(x=course_level_id,y=average)) + geom_line()
ggplot(test,aes(x=course_level_id,y=average)) + geom_dot()
ggplot(test,aes(x=course_level_id,y=average)) + geom_point()
ggplot(test,aes(x=course_level_id,y=average, group=course_level_id)) + geom_line(aes(color=course_level_id))
View(thascoretale)
View(thascoretale)
test <- thascoretale %>% group_by(username,course_level_id,cycle_id,course_id) %>% summarise(average = mean(score))
View(test)
View(test)
ggplot(test,aes(x=course_level_id,y=average, group=cycle_id)) + geom_line(aes(color=cycle_id))
ggplot(test,aes(x=cycle_id,y=average, group=course_level_id)) + geom_line(aes(color=course_level_id))
ggplot(test,aes(x=cycle_id,y=average, group=course_level_id)) + geom_point(aes(color=course_level_id))
test[test$username==test[1,]$username,]
ggplot(test[test$username==test[1,]$username,],aes(x=cycle_id,y=average, group=course_level_id)) + geom_point(aes(color=course_level_id))
ggplot(test[test$username==test[1,]$username,],aes(x=cycle_id,y=average, group=course_id)) + geom_point(aes(color=course_id))
ggplot(test,aes(x=cycle_id,y=average, group=course_id)) + geom_point(aes(color=course_id))
test <- thascoretale %>% group_by(username,course_level_id,cycle_id,course_id,course_name) %>% summarise(average = mean(score))
ggplot(test,aes(x=cycle_id,y=average, group=course_name)) + geom_point(aes(color=course_name))
ggplot(> test[test$username==test[1,]$username,],aes(x=cycle_id,y=average, group=course_name)) + geom_point(aes(color=course_name))
ggplot(test[test$username==test[1,]$username,],aes(x=cycle_id,y=average, group=course_name)) + geom_point(aes(color=course_name))
ggplot(test[test$username==test[1,]$username,],aes(x=cycle_id,y=average, group=course_name)) + geom_line(aes(color=course_name))
ggplot(test[test$username==test[1,]$username,],aes(x=cycle_id,y=average, group=course_name)) + geom_point(aes(color=course_name))
ggplot(test[test$username=="14Mtu1BesQ2wzeMc6hpc7Cvy768NPE",],aes(x=cycle_id,y=average, group=course_name)) + geom_point(aes(color=course_name))
ggplot(test[test$username=="14Mtu1BesQ2wzeMc6hpc7Cvy768NPE",],aes(x=cycle_id,y=average, group=course_name)) + geom_line(aes(color=course_name))
save.image("~/Nahual/Bloom/Edoo data/elvalle/rdata.RData")
rm(el_valle_stem_subject_ids)
stem_subject_ids <- c(6, 8, 14, 20, 24, 25, 26)
rm(elvalle_stem_subject_ids)
View(thascoretale)
View(thascoretale)
thascoretale %>% filter(subject_id %in% stem_subject_ids)
library(dplyr)
thascoretale %>% filter(subject_id %in% stem_subject_ids)
thascoretale %>% filter(subject_id %in% stem_subject_ids, gender=="female")
library(RPostgreSQL)
library(ggplot2)
library(dplyr)
library(sqldf)
library(forcats)
achievements_table_cat <- sqldf("select aa.name, aa.short_description, aa.short_congratulation, aac.name from achievements_achievement as aa inner join achievements_achievementcategory as aac on aa.category_id=aac.id",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
View(achievements_table_cat %>% select(name, name))
achievements_table_cat <- sqldf("select aa.name, aa.short_description, aa.short_congratulation, aac.name as category from achievements_achievement as aa inner join achievements_achievementcategory as aac on aa.category_id=aac.id",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
View(achievements_table_cat %>% select(name, category))
achievements_table_cat <- sqldf("select aa.name as achievement, aa.short_description, aa.short_congratulation, aac.name as category from achievements_achievement as aa inner join achievements_achievementcategory as aac on aa.category_id=aac.id",
dbname="elvalle",user="elvalle",password="elvallepasspost",host="edoo-replica.cmys3wkb8w2g.us-east-1.rds.amazonaws.com")
View(achievements_table_cat %>% select(achievement, category))
setwd("/home/ranchobojon/Documents/SEMESTRE_2_2019/Data Mining")
setwd("/home/ranchobojon/Documents/SEMESTRE_1_2020/InteligenciaArtificial")
admission_data <- read.csv2("Admission-Predict.csv")
admission_data <- read.csv2("Admission_Predict.csv")
library(caret)
library(lattice)
View(admission_data)
View(admission_data)
admission_data <- read.csv("Admission_Predict.csv")
inTrain <- createDataPartition(y=admission_data$Chance.of.Admit, p=0.6,list=FALSE)
training <- bank_data[inTrain,]
?createDataPartition
inTrain <- createDataPartition(y=admission_data$Chance.of.Admit, p=0.6,list=FALSE)
training <- admission_data[inTrain,]
test_and_cv <- admission_data[-inTrain,]
inCV <- createDataPartition(y=test_and_cv$Chance.of.Admit, p=0.5,list=FALSE)
cross_v <- test_and_cv[inCV,]
test <- test_and_cv[-inCV,]
View(test)
View(test)
View(test_and_cv)
write.csv(training,"adamission_training.csv")
write.csv(test,"admission_test.csv")
write.csv(cross_v,"admission_cv.csv")
write.csv(training,"adamission_training.csv", row.names=F)
write.csv(test,"admission_test.csv",row.names=F)
write.csv(cross_v,"admission_cv.csv",row.names=F)
